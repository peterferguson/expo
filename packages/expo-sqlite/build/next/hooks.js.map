{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/next/hooks.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE9E,OAAO,EAAE,iBAAiB,EAAiB,MAAM,YAAY,CAAC;AAsC9D;;GAEG;AACH,MAAM,aAAa,GAAG,aAAa,CAAkB,IAAI,CAAC,CAAC;AAE3D;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,EAC7B,MAAM,EACN,OAAO,EACP,QAAQ,EACR,WAAW,EACX,eAAe,EACf,YAAY,GACQ;IACpB,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAkB,IAAI,CAAC,CAAC;IAChE,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAe,IAAI,CAAC,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,UAAU,KAAK;YAClB,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBACpD,WAAW,CAAC,EAAE,CAAC,CAAC;gBAChB,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,MAAM,WAAW,CAAC,EAAE,CAAC,CAAC;iBACvB;gBACD,UAAU,CAAC,KAAK,CAAC,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,QAAQ,CAAC,CAAC,CAAC,CAAC;aACb;QACH,CAAC;QAED,KAAK,UAAU,QAAQ;YACrB,IAAI;gBACF,MAAM,QAAQ,EAAE,UAAU,EAAE,CAAC;aAC9B;YAAC,OAAO,CAAC,EAAE;gBACV,QAAQ,CAAC,CAAC,CAAC,CAAC;aACb;QACH,CAAC;QAED,KAAK,EAAE,CAAC;QAER,OAAO,GAAG,EAAE;YACV,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAEnC,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,MAAM,OAAO,GACX,YAAY;YACZ,CAAC,CAAC,CAAC,EAAE,EAAE;gBACL,MAAM,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;QACL,OAAO,CAAC,KAAK,CAAC,CAAC;KAChB;IAED,IAAI,OAAO,EAAE;QACX,OAAO,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;KAChE;IACD,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;AACtF,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,gBAAgB;IAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAC1C,IAAI,OAAO,IAAI,IAAI,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { openDatabaseAsync, type Database } from './Database';\nimport type { OpenOptions } from './NativeDatabase';\n\nexport interface SQLiteProviderProps {\n  /**\n   * The name of the database file to open.\n   */\n  dbName: string;\n\n  /**\n   * Open options.\n   */\n  options?: OpenOptions;\n\n  /**\n   * The children to render.\n   */\n  children: React.ReactNode;\n\n  /**\n   * A custom initialization handler to run before rendering the children.\n   * You can use this to run database migrations or other setup tasks.\n   */\n  initHandler?: (db: Database) => Promise<void>;\n\n  /**\n   * A custom loading fallback to render before the database is ready.\n   * @default null\n   */\n  loadingFallback?: React.ReactNode;\n\n  /**\n   * Handle errors from SQLiteProvider.\n   * @default rethrow the error\n   */\n  errorHandler?: (error: Error) => void;\n}\n\n/**\n * Create a context for the SQLite database\n */\nconst SQLiteContext = createContext<Database | null>(null);\n\n/**\n * Context.Provider component that provides a SQLite database to all children.\n * All descendants of this component will be able to access the database using the [`useSQLiteContext`](#usesqlitecontext) hook.\n */\nexport function SQLiteProvider({\n  dbName,\n  options,\n  children,\n  initHandler,\n  loadingFallback,\n  errorHandler,\n}: SQLiteProviderProps) {\n  const [database, setDatabase] = useState<Database | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function setup() {\n      try {\n        const db = await openDatabaseAsync(dbName, options);\n        setDatabase(db);\n        if (initHandler != null) {\n          await initHandler(db);\n        }\n        setLoading(false);\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    async function teardown() {\n      try {\n        await database?.closeAsync();\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    setup();\n\n    return () => {\n      teardown();\n    };\n  }, [dbName, options, initHandler]);\n\n  if (error != null) {\n    const handler =\n      errorHandler ??\n      ((e) => {\n        throw e;\n      });\n    handler(error);\n  }\n\n  if (loading) {\n    return loadingFallback != null ? <>{loadingFallback}</> : null;\n  }\n  return <SQLiteContext.Provider value={database}>{children}</SQLiteContext.Provider>;\n}\n\n/**\n * A global hook for accessing the SQLite database across components.\n * This hook should only be used within a [`<SQLiteProvider>`](#sqliteprovider) component.\n *\n * @example\n * ```tsx\n * export default function App() {\n *   return (\n *     <SQLiteProvider dbName=\"test.db\">\n *       <Main />\n *     </SQLiteProvider>\n *   );\n * }\n *\n * export function Main() {\n *  const db = useSQLiteContext();\n *  console.log('sqlite version', db.getSync('SELECT sqlite_version()'));\n *  return <View />\n * }\n * ```\n */\nexport function useSQLiteContext(): Database {\n  const context = useContext(SQLiteContext);\n  if (context == null) {\n    throw new Error('useSQLiteContext must be used within a <SQLiteProvider>');\n  }\n  return context;\n}\n"]}
{"name":"expo-sqlite-next","kind":1,"children":[{"name":"Database","kind":128,"comment":{"summary":[{"kind":"text","text":"A SQLite database."}]},"children":[{"name":"constructor","kind":512,"signatures":[{"name":"new Database","kind":16384,"parameters":[{"name":"dbName","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"nativeDatabase","kind":32768,"type":{"type":"reference","name":"NativeDatabase"}}],"type":{"type":"reference","name":"Database"}}]},{"name":"dbName","kind":1024,"flags":{"isPublic":true,"isReadonly":true},"type":{"type":"intrinsic","name":"string"}},{"name":"allAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.allAsync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.allAsync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"allAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"allSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareSync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.allSync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.allSync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"name":"allSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}]},{"name":"closeAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"closeSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"eachAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.eachAsync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.eachAsync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"AsyncIterableIterator","qualifiedName":"AsyncIterableIterator","package":"typescript"}},{"name":"eachAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"AsyncIterableIterator","qualifiedName":"AsyncIterableIterator","package":"typescript"}}]},{"name":"eachSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareSync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.eachSync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.eachSync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"IterableIterator","qualifiedName":"IterableIterator","package":"typescript"}},{"name":"eachSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"IterableIterator","qualifiedName":"IterableIterator","package":"typescript"}}]},{"name":"execAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n> Note: The queries are not escaped for you! Be careful when constructing your queries."}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"execSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n\n> **Note:** The queries are not escaped for you! Be careful when constructing your queries.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"getAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.getAsync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.getAsync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"getAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareSync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.getSync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.getSync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}},{"name":"getSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}}]},{"name":"isInTransactionAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"isInTransactionSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"prepareAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prepare a SQL statement."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Statement`"},{"kind":"text","text":" object."}]}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Statement"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"prepareSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prepare a SQL statement.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Statement`"},{"kind":"text","text":" object."}]}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Statement"}}]},{"name":"runAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.runAsync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.runAsync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"runAsync","kind":4096,"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"runSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for "},{"kind":"code","text":"`prepareSync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Statement.runSync`"},{"kind":"text","text":".\nUnlike "},{"kind":"code","text":"`Statement.runSync`"},{"kind":"text","text":", this method finalizes the statement after execution.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"parameters":[{"name":"source","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"Parameters to bind to the query."}]},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","name":"RunResult"}},{"name":"runSync","kind":4096,"parameters":[{"name":"source","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","name":"RunResult"}}]},{"name":"transactionAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** This transaction is not exclusive and can be interrupted by other async queries."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.transactionAsync(async () => {\n  await db.execAsync('UPDATE test SET name = \"aaa\"');\n\n  //\n  // We cannot control the order of async/await order, so order of execution is not guaranteed.\n  // The following UPDATE query out of transaction may be executed here and break the expectation.\n  //\n\n  const result = await db.getAsync<{ name: string }>('SELECT name FROM Users');\n  expect(result?.name).toBe('aaa');\n});\ndb.execAsync('UPDATE test SET name = \"bbb\"');\n```"},{"kind":"text","text":"\nIf you worry about the order of execution, use "},{"kind":"code","text":"`transactionExclusiveAsync`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"task","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"transactionExclusiveAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionExclusiveAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\nThe transaction may be exclusive.\nAs long as the transaction is converted into a write transaction,\nthe other async write queries will abort with "},{"kind":"code","text":"`database is locked`"},{"kind":"text","text":" error."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.transactionExclusiveAsync(async (txn) => {\n  await txn.execAsync('UPDATE test SET name = \"aaa\"');\n});\n```"}]}]},"parameters":[{"name":"task","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction. Any queries inside the transaction must be executed on the "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object.\nThe "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object has the same interfaces as the "},{"kind":"code","text":"`Database`"},{"kind":"text","text":" object. You can use "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" like a "},{"kind":"code","text":"`Database`"},{"kind":"text","text":" object."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"parameters":[{"name":"txn","kind":32768,"type":{"type":"reference","name":"Transaction"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"transactionSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"parameters":[{"name":"task","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}]},{"name":"Statement","kind":128,"comment":{"summary":[{"kind":"text","text":"A prepared statement returned by "},{"kind":"code","text":"`Database.prepareAsync()`"},{"kind":"text","text":" that can be binded with parameters and executed."}]},"children":[{"name":"constructor","kind":512,"signatures":[{"name":"new Statement","kind":16384,"parameters":[{"name":"nativeDatabase","kind":32768,"type":{"type":"reference","name":"NativeDatabase"}},{"name":"nativeStatement","kind":32768,"type":{"type":"reference","name":"NativeStatement"}}],"type":{"type":"reference","name":"Statement"}}]},{"name":"allAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows from the prepared statement."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"allAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"allSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows from the prepared statement.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"name":"allSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}]},{"name":"eachAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Iterate the prepared statement and return results as an async iterable."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test');\nfor await (const row of statement.eachAsync<any>()) {\n  console.log(row);\n}\n```"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"AsyncIterableIterator","qualifiedName":"AsyncIterableIterator","package":"typescript"}},{"name":"eachAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"AsyncIterableIterator","qualifiedName":"AsyncIterableIterator","package":"typescript"}}]},{"name":"eachSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Iterate the prepared statement and return results as an iterable.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst statement = await db.prepareSync('SELECT * FROM test');\nfor (const row of statement.eachSync<any>()) {\n  console.log(row);\n}\n```"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"IterableIterator","qualifiedName":"IterableIterator","package":"typescript"}},{"name":"eachSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"IterableIterator","qualifiedName":"IterableIterator","package":"typescript"}}]},{"name":"finalizeAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement.\n> **Note:** Remember to finalize the prepared statement whenever you call "},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":" to avoid resource leaks."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"finalizeSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement.\n\n> **Note:** Remember to finalize the prepared statement whenever you call "},{"kind":"code","text":"`prepareSync()`"},{"kind":"text","text":" to avoid resource leaks."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"getAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get one row from the prepared statement."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"getAsync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get one row from the prepared statement.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}},{"name":"getSync","kind":4096,"typeParameter":[{"name":"T","kind":131072}],"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}}]},{"name":"resetAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"resetAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"resetSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"resetSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"runAsync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the result."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}},{"name":"runAsync","kind":4096,"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"runSync","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the result.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`BindParams`"}]}]},"parameters":[{"name":"params","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","name":"VariadicBindParams"}}],"type":{"type":"reference","name":"RunResult"}},{"name":"runSync","kind":4096,"parameters":[{"name":"params","kind":32768,"type":{"type":"reference","name":"BindParams"}}],"type":{"type":"reference","name":"RunResult"}}]}]},{"name":"OpenOptions","kind":256,"comment":{"summary":[{"kind":"text","text":"Options for opening a database."}]},"children":[{"name":"enableCRSQLite","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to enable the CR-SQLite extension."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"enableChangeListener","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to call the "},{"kind":"code","text":"`sqlite3_update_hook`"},{"kind":"text","text":" function and enable the "},{"kind":"code","text":"`onDatabaseChange`"},{"kind":"text","text":" events."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"useNewConnection","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to create new connection even if connection with the same database name exists in cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"RunResult","kind":256,"comment":{"summary":[{"kind":"text","text":"Result of a "},{"kind":"code","text":"`runAsync`"},{"kind":"text","text":" call."}]},"children":[{"name":"changes","kind":1024,"comment":{"summary":[{"kind":"text","text":"The number of rows affected."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"lastInsertRowid","kind":1024,"comment":{"summary":[{"kind":"text","text":"The last inserted row ID."}]},"type":{"type":"intrinsic","name":"number"}}]},{"name":"BindParams","kind":4194304,"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"BindValue"}],"name":"Record","qualifiedName":"Record","package":"typescript"},{"type":"array","elementType":{"type":"reference","name":"BindValue"}}]}},{"name":"BindValue","kind":4194304,"comment":{"summary":[{"kind":"text","text":"Bind parameters to the prepared statement.\nYou can either pass the parameters in the following forms:"}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"- Variadic arguments for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nawait statement.getAsync('test1', 789);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"- A single array for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nawait statement.getAsync(['test1', 789]);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"- A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n\n  Through we support multiple named parameter forms like "},{"kind":"code","text":"`:VVV`"},{"kind":"text","text":", "},{"kind":"code","text":"`@VVV`"},{"kind":"text","text":", and "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":". We recommend using "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":" because JavaScript allows using "},{"kind":"code","text":"`$`"},{"kind":"text","text":" in identifiers without escaping.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\nawait statement.getAsync({ $value: 'test1', $intValue: 789 });\n```"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"VariadicBindParams","kind":4194304,"type":{"type":"array","elementType":{"type":"reference","name":"BindValue"}}},{"name":"addDatabaseChangeListener","kind":64,"signatures":[{"name":"addDatabaseChangeListener","kind":4096,"comment":{"summary":[{"kind":"text","text":"Add a listener for database changes.\n> Note: to enable this feature, you must set "},{"kind":"code","text":"`enableChangeListener`"},{"kind":"text","text":" to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when opening the database."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":" object that you can call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on when you would like to unsubscribe the listener."}]}]},"parameters":[{"name":"listener","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that receives the "},{"kind":"code","text":"`dbName`"},{"kind":"text","text":", "},{"kind":"code","text":"`tableName`"},{"kind":"text","text":" and "},{"kind":"code","text":"`rowId`"},{"kind":"text","text":" of the modified data."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"parameters":[{"name":"event","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"dbName","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"rowId","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"tableName","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription"}}]},{"name":"deleteDatabaseAsync","kind":64,"signatures":[{"name":"deleteDatabaseAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file."}]},"parameters":[{"name":"dbName","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"deleteDatabaseSync","kind":64,"signatures":[{"name":"deleteDatabaseSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}]},"parameters":[{"name":"dbName","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"openDatabaseAsync","kind":64,"signatures":[{"name":"openDatabaseAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Database object."}]}]},"parameters":[{"name":"dbName","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"OpenOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Database"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"openDatabaseSync","kind":64,"signatures":[{"name":"openDatabaseSync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Database object."}]}]},"parameters":[{"name":"dbName","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"OpenOptions"}}],"type":{"type":"reference","name":"Database"}}]}]}